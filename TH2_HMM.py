# -*- coding: utf-8 -*-
"""Bản sao của Bai thực hành 2 Time Sẻis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5rMRCzcVg9N7cCS3fPIWdLYIzIOm8MN
"""

# Cài hmmlearn và các thư viện cần thiết
!pip install hmmlearn filterpy matplotlib pandas numpy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn.hmm import GaussianHMM
from filterpy.monte_carlo import systematic_resample
from sklearn.metrics import mean_squared_error
import time

# Đọc file CSV
df = pd.read_csv('bitcoin_2017_to_2023.csv')

# Xem tên cột
print(df.columns)

"""Chuẩn hóa dữ liệu đầu vào"""

# Chỉ dùng cột 'close'
df['timestamp'] = pd.to_datetime(df['timestamp'])
df = df.sort_values('timestamp')  # đảm bảo đúng thứ tự thời gian

data = df['close'].values.reshape(-1, 1)

"""Huấn luyện HMM bằng EM"""

model_em = GaussianHMM(n_components=3, covariance_type="diag", n_iter=100)
model_em.fit(data)
log_likelihood_em = model_em.score(data)

print("Log-likelihood (EM):", log_likelihood_em)

"""Huấn luyện HMM bằng Monte Carlo Particle Filter"""

def particle_filter(observations, num_particles=1000):
    N = num_particles
    particles = np.random.normal(loc=np.mean(observations), scale=np.std(observations), size=N)
    weights = np.ones(N) / N

    estimates = []
    for z in observations:
        particles += np.random.normal(0, 0.5, N)  # quá trình chuyển trạng thái
        weights *= np.exp(-(particles - z)**2 / 2)  # likelihood
        weights += 1.e-300
        weights /= sum(weights)

        if 1. / np.sum(weights**2) < N / 2:
            indexes = systematic_resample(weights)
            particles = particles[indexes]
            weights = np.ones(N) / N

        estimate = np.average(particles, weights=weights)
        estimates.append(estimate)

    return estimates

"""vòng lặp"""

estimates_pf = particle_filter(df['close'].values)

"""Tính sai số"""

mse_pf = mean_squared_error(df['close'], estimates_pf)
print("MSE Particle Filter:", mse_pf)

"""biểu đồ trưucj quan

huấn luyện HMM bằng EM
"""

def particle_filter(observations, num_particles=100, process_noise=1.0, measurement_noise=1.0):
    n = len(observations)
    particles = np.random.normal(loc=observations[0], scale=5, size=num_particles)
    weights = np.ones(num_particles) / num_particles
    estimates = []

    for t in range(n):
        # 1. Dự đoán: thêm nhiễu tiến trình
        particles += np.random.normal(0, process_noise, size=num_particles)

        # 2. Tính trọng số: dựa trên sai lệch giữa particle và quan sát
        weights *= np.exp(-0.5 * ((observations[t] - particles) / measurement_noise) ** 2)
        weights += 1e-300  # tránh chia cho 0
        weights /= np.sum(weights)

        # 3. Ước lượng: giá trị trung bình có trọng số
        estimate = np.sum(particles * weights)
        estimates.append(estimate)

        # 4. Resample (tránh suy biến hạt)
        indices = np.random.choice(np.arange(num_particles), size=num_particles, p=weights)
        particles = particles[indices]
        weights = np.ones(num_particles) / num_particles

    return estimates

close_prices = df['close'].values
estimates_pf = particle_filter(close_prices, num_particles=200, process_noise=50, measurement_noise=100)

# Vẽ lại biểu đồ so sánh
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['close'], label='Giá thực tế', color='blue')
plt.plot(df['timestamp'], estimates_pf, label='Ước lượng PF (trạng thái ẩn)', color='orange')
plt.xlabel("Thời gian")
plt.ylabel("Giá Bitcoin")
plt.title("So sánh quan sát và trạng thái ẩn (Particle Filter)")
plt.legend()
plt.grid(True)
plt.show()

pred_em = model_em.predict(data)  # trả về trạng thái ẩn

print(df.columns)

"""Particle Filter để ước lượng trạng thái ẩn trong HMM."""

# Giả sử bạn đã có DataFrame df với cột 'timestamp' và 'close'
# df = pd.read_csv('your_data.csv')

# Lấy dữ liệu cho HMM
observations = df['close'].values.reshape(-1, 1)

# Huấn luyện HMM
model = GaussianHMM(n_components=3, covariance_type="diag", n_iter=1000)
model.fit(observations)

# Dự đoán chuỗi trạng thái ẩn
hidden_states = model.predict(observations)

# Lấy trung bình (mean) của mỗi state
state_means = model.means_.flatten()

# Ánh xạ từng state sang giá trị ước lượng tương ứng
estimated_em = state_means[hidden_states]

# Thêm cột estimated_price vào DataFrame
df['estimated_price'] = estimated_em

# === 2. Vẽ biểu đồ ===
plt.figure(figsize=(10, 6))

# Vẽ giá thực tế
plt.plot(df['timestamp'], df['close'], label='Giá thực tế', color='blue', alpha=0.7)

# Vẽ giá ước lượng từ HMM
plt.plot(df['timestamp'], df['estimated_price'], label='Giá ước lượng từ HMM', color='red', linestyle='--', alpha=0.7)

# Thêm tiêu đề và nhãn trục
plt.title('So sánh Giá Thực Tế và Giá Ước Lượng từ HMM', fontsize=14)
plt.xlabel('Thời gian', fontsize=12)
plt.ylabel('Giá', fontsize=12)

# Thêm chú thích
plt.legend()

# Hiển thị biểu đồ
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()